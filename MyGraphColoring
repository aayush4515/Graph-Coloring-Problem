#pragma once
#include "MyGraph.h"

class MyGraphColoring {
private:
    const MyGraph& graph;

public:
    MyGraphColoring(const MyGraph& g) : graph(g) {}

    bool isSafe(int v, const vector<int>& color, int c) const {
        const auto& adjMatrix = graph.getAdjacencyMatrix();
        for (size_t i = 0; i < graph.getVertexCount(); ++i) {
            if (adjMatrix[v][i] && c == color[i]) {
                return false;
            }
        }
        return true;
    }

    bool backtrackColoring(vector<int>& color, int v, int m) const {
        if (v == graph.getVertexCount())
            return true;

        for (int c = 1; c <= m; c++) {
            if (isSafe(v, color, c)) {
                color[v] = c;
                if (backtrackColoring(color, v + 1, m))
                    return true;
                color[v] = 0;
            }
        }

        return false;
    }

    bool performGraphColoring(int m) const {
        if (!graph.isValidGraphCheck()) {
            cerr << "Invalid graph data. Cannot perform graph coloring." << endl;
            return false;
        }

        vector<int> color(graph.getVertexCount(), 0);

        if (!backtrackColoring(color, 0, m)) {
            cout << "Solution does not exist" << endl;
            return false;
        }

        cout << "Solution Exists: Following are the assigned colors" << endl;
        cout << "Graph Coloring:" << endl;
        for (size_t i = 0; i < graph.getVertexCount(); ++i) {
            cout << "v" << i << " : " << color[i] << endl;
        }

        return true;
    }
};

